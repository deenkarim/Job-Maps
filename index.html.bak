<html lang="en">
<head>
  <title>Job Maps</title>
  
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" href="styles.css" type="text/css" media="screen" />
  <link rel="stylesheet" href="footermenu.css" type="text/css"  />
  <script src="http://maps.google.com/maps/api/js?v=3.5&sensor=false" type="text/javascript"></script>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>
  	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js"></script>
  	<script type="text/javascript" src="js/jquery.periodicalupdater.js"></script>
  <script src="js/markermanager.js" type="text/javascript"></script>
  <script src="js/StyledMarker.js" type="text/javascript"></script>
  <script src="js/jquery.metadata.js" type="text/javascript"></script>
  <script src="js/jquery.jmapping.js" type="text/javascript"></script>
  <script src="js/jquery.geowidget-1.0.js" type="text/javascript"></script>
  

  
  <script type="text/javascript"> 
  	
  	var geocoder;
  	var map;
/**
* Returns an XMLHttp instance to use for asynchronous
* downloading. This method will never throw an exception, but will
* return NULL if the browser does not support XmlHttp for any reason.
* @return {XMLHttpRequest|Null}
*/
function createXmlHttpRequest() {
 try {
   if (typeof ActiveXObject != 'undefined') {
     return new ActiveXObject('Microsoft.XMLHTTP');
   } else if (window["XMLHttpRequest"]) {
     return new XMLHttpRequest();
   }
 } catch (e) {
   changeStatus(e);
 }
 return null;
};

/**
* This functions wraps XMLHttpRequest open/send function.
* It lets you specify a URL and will call the callback if
* it gets a status code of 200.
* @param {String} url The URL to retrieve
* @param {Function} callback The function to call once retrieved.
*/
function downloadUrl(url, callback) {
 var status = -1;
 var request = createXmlHttpRequest();
 if (!request) {
   return false;
 }

 request.onreadystatechange = function() {
   if (request.readyState == 4) {
     try {
       status = request.status;
     } catch (e) {
       // Usually indicates request timed out in FF.
     }
     if (status == 200) {
       callback(request.responseXML, request.status);
       request.onreadystatechange = function() {};
     }
   }
 }
 request.open('GET', url, true);
 try {
   request.send(null);
 } catch (e) {
   changeStatus(e);
 }
};

/**
 * Parses the given XML string and returns the parsed document in a
 * DOM data structure. This function will return an empty DOM node if
 * XML parsing is not supported in this browser.
 * @param {string} str XML string.
 * @return {Element|Document} DOM.
 */
function xmlParse(str) {
  if (typeof ActiveXObject != 'undefined' && typeof GetObject != 'undefined') {
    var doc = new ActiveXObject('Microsoft.XMLDOM');
    doc.loadXML(str);
    return doc;
  }

  if (typeof DOMParser != 'undefined') {
    return (new DOMParser()).parseFromString(str, 'text/xml');
  }

  return createElement('div', null);
}

/**
 * Appends a JavaScript file to the page.
 * @param {string} url
 */
function downloadScript(url) {
  var script = document.createElement('script');
  script.src = url;
  document.body.appendChild(script);
}


  
  
  
  
  
  
  
  
  
  
  
function success(position) {

	geocoder = new google.maps.Geocoder();
  var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  var myOptions = {
    zoom: 15,
    center: latlng,
    mapTypeControl: false,
    navigationControlOptions: {style: google.maps.NavigationControlStyle.SMALL},
    mapTypeId: google.maps.MapTypeId.ROADMAP,
		enableHighAccuracy: true,
		watchPosition: true
  };
  
  map = new google.maps.Map(document.getElementById("map"), myOptions);
  
  
  var marker = new google.maps.Marker({
      position: latlng, 
      map: map, 
	  animation: google.maps.Animation.DROP,
	  icon: "images/centerpoint.png"
  });
  
  
  /*
    google.maps.event.addListener(marker, 'click', function() {
          // make info box
		  var box = "<div>testing</div>";
		  var infoWindow = new google.maps.InfoWindow;
		infoWindow.setContent(box);
		infoWindow.open(map, marker);
          });
  */
  
    downloadUrl("server.php?id=getuser", function(data) {
      var markers = data.documentElement.getElementsByTagName("userDetails");
      for (var i = 0; i < markers.length; i++) {
				var postcode = markers[i].getAttribute("postcode");
				  addPostCode(postcode);
				
			}});
	
     
  downloadUrl("output.php", function(data) {
      var markers = data.documentElement.getElementsByTagName("marker");
      for (var i = 0; i < markers.length; i++) {
        var latlng = new google.maps.LatLng(parseFloat(markers[i].getAttribute("lat")),
                                    parseFloat(markers[i].getAttribute("lng")));
			/*	var postcode = markers[i].getAttribute("postcode");
				if (postcode != "undefined") {
					geocoder.geocode( { 'address': postcode}, function(results, status) { 
					 latlng= results[0].geometry.location;
					});
				}
			*/	
				
				bounds.extend(latlng);
				var title = markers[i].getAttribute("name");
				var desc = markers[i].getAttribute("desc");
        var marker = new google.maps.Marker({
				title:markers[i].getAttribute("name"),
				position:latlng,
				map:map
				});
		
		/* google.maps.event.addListener(marker, 'click', function() {
          // make info box
		  var box = "<div>"+ title+"<br />" +desc+"</div>";
				var infoWindow = new google.maps.InfoWindow;
				infoWindow.setContent(box);
				infoWindow.open(map, marker);
          });	
		*/
		
       }
     });
  
      function addPostCode(zip) {
        geocoder.geocode( { 'address': zip}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK)
        {
          //  map.setCenter(results[0].geometry.location);
          bounds.extend(results[0].geometry.location);
            var marker = new google.maps.Marker({
            position: results[0].geometry.location,
            title: zip,
            map: map,
            animation: google.maps.Animation.DROP,
	  				icon: "images/centerpoint.png"
        });
        markers.push(marker);
        } else {
            alert("Geocode was not successful for the following reason: " + status);
        }
        });
    }

    function checkZip(zip)
    {
        var distance = Number.MAX_VALUE;
        var index = 0;
        geocoder.geocode( { 'address': zip}, function(results, status)
        {
            if (status == google.maps.GeocoderStatus.OK)
            {
                for(ix=0; ix< markers.length; ix++)
                {
                    var tmp = getDistance(results[0].geometry.location, markers[ix].position);
                    if (tmp < distance)
                    {
                        distance = tmp;
                        index = ix;
                    }
                }
                alert('nearest zipcode is :' + markers[index].name);
            }
        });
    }

    function getDistance(latlng1, latlng2)
    {
        var R = 6371; // Radius of the earth in km
        var dLat = (latlng2.lat()-latlng1.lat()) * Math.PI / 180;  // Javascript functions in radians
        var dLon = (latlng2.lng()-latlng1.lng()) * Math.PI / 180;
        var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(latlng1.lat()  * Math.PI / 180) * Math.cos(latlng2.lat()  * Math.PI / 180) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        var d = R * c; // Distance in km
        d = d * 0.621371192;
        return d;
    }
 
 map.fitBounds(bounds); 
}

function error(msg) {
  var s = document.querySelector('#status');
  s.innerHTML = typeof msg == 'string' ? msg : "failed";
  s.className = 'fail';
  
  // console.log(arguments);
}

if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(success, error);
} else {
  error('not supported');
}




</script>

</head>
<body>
 <div id="header" class="clearfix">
	<div class="right clearfix">
		<ul>
			<li>
				<a href="" title="Sign up now for job vacancies" class="first">Sign up</a>
			</li>
			<li>
				<a href="" title="How JobMap Works">How JobMap works</a>
			</li>
						<li>
				<a href="" title="get it for your mobile device!">Mobile</a>
			</li>
			<li>
				<a href="" title="Want to advertise a job?">Employer</a>
			</li>
		</ul>
	</div>
</div>
   <div id="map-options">
		<a href="#" id="map-options-btn" title="Map Options">Map Options</a>
	<a href="#" id="toggle-menu-btn" title="Toggle menu bar"></a>
</div>
 
 
 
 
 
 
 
 
 
 
 
    <div id="map" style="width:100%; height:100%"></div>


<div id="plane-stats-overlay">
	<img src="public/img/ui/icons/plane-stats-icon.png" alt="" width="15" height="16" /><span id="plane-total-visible-stats">0</span> local jobs <br />
	<img src="public/img/ui/icons/plane-stats-icon.png" alt="" width="15" height="16" /><span id="plane-total-stats">0</span> jobs
</div>


<div id="profile-view" style="display:none">
	<p>testing blablablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlk
		blablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlkblablablaksdhlkshlk</p>
	
</div>


</body>
</html>
